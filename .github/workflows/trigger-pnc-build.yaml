name: Trigger PNC Build

on:
  workflow_dispatch:
#  push:
#    branches:
#      - 'rhoai-*'
#    paths:
#      - build/operator-nudging.yaml

env:
  GITHUB_ORG: rhoai-rhtap
  SSO_SERVICE_ACCOUNT_NAME: ${{ secrets.SSO_SERVICE_ACCOUNT_NAME }}
  SSO_SERVICE_ACCOUNT_CLIENT_SECRET: ${{ secrets.SSO_SERVICE_ACCOUNT_CLIENT_SECRET }}
  PNC_PROFILE: ${{ secrets.PNC_PROFILE }}
  PNC_CLI_CONFIG_GIT_URL: https://gitlab.cee.redhat.com/project-ncl/utils.git
  PNC_CLI_CONFIG_REVISION: master

permissions:
  contents: write

jobs:
  run-pnc-build:
    runs-on:
      - self-hosted
      - pnc
    container:
      image: quay.io/redhat-user-workloads/konflux-jbs-pnc-tenant/pnc/pnc-cli:48a761b5093bc474850b2ebcf06641825940deb7
      options: --user root
    steps:
      - name: Setup
        id: setup
        run: |
          abs_cwd=$(pwd)
          work_dir=pnc-$(date +%s)
          mkdir $work_dir
          cd $work_dir
          echo "work_dir=$work_dir" >> $GITHUB_OUTPUT
          echo "abs_cwd=$abs_cwd" >> $GITHUB_OUTPUT
          
          #install dependencies
          os="$(uname -s | tr '[:upper:]' '[:lower:]')"
          arch="$(uname -m | sed 's/x86_64/amd64/')"
          yq_version="v4.44.3"
          yq_filename="yq-$yq_version"
          echo "-> Downloading yq" >&2
          curl -sSfLo "$yq_filename" "https://github.com/mikefarah/yq/releases/download/$yq_version/yq_${os}_${arch}"
          chmod +x $yq_filename
          ln -s $yq_filename yq
          cp $yq_filename /usr/local/bin/yq
          
          microdnf install -y git
      - name: Get Current branch name
        id: get_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      - name: Git checkout build config
        id: checkout-build-config
        run: |
          checkout_dir=${{ steps.setup.outputs.work_dir }}/${{ steps.get_branch.outputs.branch }}
          rhoai_version=${{ steps.get_branch.outputs.branch }}
          mkdir -p $checkout_dir
          cd $checkout_dir
          git config --global init.defaultBranch ${rhoai_version}
          git init -q
          git remote add origin https://github.com/${{ env.GITHUB_ORG }}/RHOAI-Build-Config
          git config core.sparseCheckout true
          git config core.sparseCheckoutCone false
          echo "config/${{ vars.COMPONENT }}-pig-build-config.yaml" >> .git/info/sparse-checkout
          git fetch -q --depth=1 origin ${rhoai_version}
          git checkout -q ${rhoai_version}
          BUILD_CONFIG_PATH=${checkout_dir}/config/${{ vars.COMPONENT }}-pig-build-config.yaml
          echo "BUILD_CONFIG_PATH=${BUILD_CONFIG_PATH}" >> $GITHUB_OUTPUT

#      - name: Git checkout build config
#        uses: actions/checkout@v4
#        with:
#          repository: ${{ env.GITHUB_ORG }}/RHOAI-Build-Config
#          ref: ${{ steps.get_branch.outputs.branch }}
#          path: ${{ steps.setup.outputs.work_dir }}/${{ steps.get_branch.outputs.branch }}
#          sparse-checkout: |
#            config/${{ vars.COMPONENT }}-pig-build-config.yaml
#          sparse-checkout-cone-mode: false
      - name: Checkout PNC cli config
        id: checkout-pnc-cli-config
        run: |
          checkout_dir=${{ steps.setup.outputs.work_dir }}/cli-config
          mkdir -p $checkout_dir
          cd $checkout_dir
          git config --global http.sslVerify false
          git config --global init.defaultBranch ${PNC_CLI_CONFIG_REVISION}
          git init -q
          git remote add origin ${PNC_CLI_CONFIG_GIT_URL}
          git config core.sparseCheckout true
          git config core.sparseCheckoutCone false
          echo "konflux/configs/pnc_cli/config.yaml" >> .git/info/sparse-checkout
          git fetch -q --depth=1 origin ${PNC_CLI_CONFIG_REVISION}
          git checkout -q ${PNC_CLI_CONFIG_REVISION}
          PNC_CLI_BUILD_CONFIG_PATH=${checkout_dir}/konflux/configs/pnc_cli/config.yaml
          echo "PNC_CLI_BUILD_CONFIG_PATH=${PNC_CLI_BUILD_CONFIG_PATH}" >> $GITHUB_OUTPUT

      - name: Run PNC Build
        run: |
          BUILD_CONFIG_URL=rhoai-rhtap/RHOAI-Build-Config
          BUILD_CONFIG_REVISION=rhoai-2.13
          BUILD_CONFIG_PATH=odh-pig-builds/build-config.yaml
          
          echo -e "===================="
          
          echo -e "\nChecking and copying the build config ..."
          ${BUILD_CONFIG_PATH}=${{ steps.checkout-build-config.outputs.BUILD_CONFIG_PATH }}
          ls -l ${BUILD_CONFIG_PATH}
          cp ${BUILD_CONFIG_PATH} build-config.yaml
          ls -l
          #curl https://raw.githubusercontent.com/${BUILD_CONFIG_URL}/refs/heads/${BUILD_CONFIG_REVISION}/${BUILD_CONFIG_PATH} -o build-config.yaml
          
          echo -e "\nChecking the PNC cli config ..."
          ls -l ${{ steps.checkout-pnc-cli-config.outputs.PNC_CLI_BUILD_CONFIG_PATH }}
          #curl -k "https://gitlab.cee.redhat.com/project-ncl/utils/-/raw/master/konflux/configs/pnc_cli/config.yaml?ref_type=heads&inline=false" -o pnc-cli-config.yaml

          echo -e "\nReplacing credentials in the CLI config ..."
          envsubst '${SSO_SERVICE_ACCOUNT_NAME} ${SSO_SERVICE_ACCOUNT_CLIENT_SECRET}' < ${{ steps.checkout-pnc-cli-config.outputs.PNC_CLI_BUILD_CONFIG_PATH }} > config.yaml
          ls -l

          echo -e "\nStarting the PNC build ..."
          PNC_CLI_OUTPUT_FILE="pnc-cli-run-output.json"
          java -jar /home/jboss/bacon.jar pig run --mode=FORCE --downloadAttempts=3 . -p . --profile ${PNC_PROFILE} --jsonOutput > $PNC_CLI_OUTPUT_FILE
  
          echo -e "\nFinished the PNC build!"
          echo -e "\n=== PNC build output ==="
          cat $PNC_CLI_OUTPUT_FILE
          echo -e "===================="
  
          echo -e "\nGetting the list of built files (to be used later in the container build) ..."
          jq '[.builds[].builtArtifacts[]?.downloadUrl ]' "$PNC_CLI_OUTPUT_FILE" > "pnc-file-list.json"
          cat pnc-file-list.json
          
          jq '{metadata: {version: "1.0"}, artifacts: [.builds[].builtArtifacts[]? | select(.downloadUrl | endswith(".zip")) | {download_url: .downloadUrl , checksums: ("sha256:" + .sha256)}] }' $PNC_CLI_OUTPUT_FILE | yq -p json > "artifacts.lock.yaml"
          cat artifacts.lock.yaml
          ls -l
      - name: Cleanup workspace
        if: always()
        run: |
          rm -rf ${{ steps.setup.outputs.work_dir }}